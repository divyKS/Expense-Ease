import { Hono } from "hono"

import { db } from "@/db/drizzle"
import { accounts, insertAccountSchema } from "@/db/schema"
import { clerkMiddleware, getAuth } from "@hono/clerk-auth"
import { zValidator } from "@hono/zod-validator"
import { and, eq, inArray } from "drizzle-orm"
import { createId } from "@paralleldrive/cuid2"
import { z } from "zod"

const app = new Hono()
    .get('/',
        clerkMiddleware(),
        async (c) => {
            const auth = getAuth(c)

            if(!auth?.userId){
                // when this is returned instead of the data below, react query doesn't destructure it in the hook use-get-accounts
                return c.json({ error: "Unauthorized" }, 401)
            }
            
            const data = await db.select({ id: accounts.id, name: accounts.name }).from(accounts).where(eq(accounts.userId, auth.userId))
            
            return c.json({ data })
        })
    .get('/:id',
        zValidator('param', z.object({
            id: z.string().optional()
        })),
        clerkMiddleware(),
        async (c) => {
            const auth = getAuth(c)
            const { id } = c.req.valid("param")

            if (!id) {
                return c.json({ error: "Missing id." }, 400)
            }

            if (!auth?.userId) {
                return c.json({ error: "Unauthorized." }, 401)
            }

            const [data] = await db
                .select({
                id: accounts.id,
                name: accounts.name,
                })
                .from(accounts)
                .where(and(eq(accounts.userId, auth.userId), eq(accounts.id, id))) // select doesn't need returning

            if (!data) {
                return c.json({ error: "Not found." }, 404)
            }

            return c.json({ data })
        }
        )
    .post('/',
        clerkMiddleware(),
        zValidator("json", insertAccountSchema.pick({ name: true })), // we only want one field from that schema
        async (c) => {
            const auth = getAuth(c)
            const values = c.req.valid('json')
            if(!auth?.userId){
                return c.json({ error: "Unauthorized" }, 401)
            }

            // sql would always return an array, even if it's a single document
            // so we can destructure to only get the first element
            const [data] = await db.insert(accounts).values({
                id: createId(),
                userId: auth.userId,
                ...values,
            }).returning() // by default select returns an object[], not insert
            // returning() returns the inserted records, helpful for getting autogenerated fields id, createdAt

            return c.json({ data })
        })
    .post('/bulk-delete',
        clerkMiddleware(),
        zValidator('json', z.object({
            ids: z.array(z.string())
        })),
        async (c) => {
            const auth = getAuth(c)
            const values = c.req.valid('json')
            if(!auth?.userId){
                return c.json({ error: "Unauthorized" }, 401)
            }

            const data = await db.delete(accounts).where(
                and(
                    eq(accounts.userId, auth.userId),
                    inArray(accounts.id, values.ids)
                )
            ).returning({id: accounts.id})

            return c.json({data})
        }
        )
    .patch('/:id',
        clerkMiddleware(),
        zValidator(
            'param',
            z.object({
                id: z.string().optional()
            }),
        ),
        zValidator(
            'json',
            insertAccountSchema.pick({
                name: true,
            })
        ),
        async (c) => {
            const auth = getAuth(c)
            const { id } = c.req.valid('param')
            const values = c.req.valid('json')

            if(!id){
                return c.json({ error: "Missing id" }, 400)
            }
            
            if(!auth?.userId){
                return c.json({ error: "Unauthorized" }, 401)
            }

            const [data] = await db.update(accounts).set(values)
                .where(
                    and(
                        eq(accounts.userId, auth.userId),
                        eq(accounts.id, id) 
                    )
                ).returning()
            
            if(!data){
                return c.json({ error: "Account not found" }, 404)
            }

            return c.json({data})
        }
    )
    .delete('/:id',
        clerkMiddleware(),
        zValidator(
            'param',
            z.object({
                id: z.string().optional()
            }),
        ),
        async (c) => {
            const auth = getAuth(c)
            const { id } = c.req.valid('param')

            if(!id){
                return c.json({ error: "Missing id" }, 400)
            }
            
            if(!auth?.userId){
                return c.json({ error: "Unauthorized" }, 401)
            }

            const [data] = await db.delete(accounts)
                .where(
                    and(
                        eq(accounts.userId, auth.userId),
                        eq(accounts.id, id) 
                    )
                ).returning({id: accounts.id})
            
            if(!data){
                return c.json({ error: "Account not found" }, 404)
            }

            return c.json({data})
        }
    )

export default app